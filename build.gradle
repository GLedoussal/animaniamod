buildscript {	repositories {		jcenter()		maven { url = "http://files.minecraftforge.net/maven" }	}	dependencies {		classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'	}}plugins {	id "com.wynprice.cursemaven" version "2.1.1"}apply plugin: 'net.minecraftforge.gradle.forge'apply plugin: 'maven-publish'ext.mcversion = project.mcversionext.animaniaversion = project.animaniaversionversion = "${animaniaversion}"group= "com.animania"archivesBaseName = "animania-${mcversion}"sourceCompatibility = targetCompatibility = "1.8"ext.addons = project.addons.split()ext.addonversions = project.addon_versions.split()ext.buildname = "${archivesBaseName}-${version}.jar"ext.basename = "${archivesBaseName}-base-${version}.jar"ext.buildversion = ""ext.build_number = ""if (System.getenv('BUILD_NUMBER') != null) {	version += "." + System.getenv('BUILD_NUMBER')	buildversion += "." + System.getenv('BUILD_NUMBER')	animaniaversion += "." + System.getenv('BUILD_NUMBER')}compileJava {	sourceCompatibility = targetCompatibility = "1.8"}minecraft {	version = project.forgeversion	runDir = "run"	mappings = project.mappings	makeObfSourceJar = false	replace 'GRADLE:VERSION', animaniaversion	replace "IS_DEV = true", "IS_DEV = false"	addons.eachWithIndex {element, i ->		replace "GRADLE:${element}_version", "${addonversions[i]}${buildversion}"	}}repositories {	maven { //Maven for CraftStudioApi		name = "LeviathanStudio maven"		url = "https://repo.leviathan-studio.com/leviathan/"	}	maven { //Maven for Waila		name 'ProfMobius maven'		url "http://mobiusstrip.eu/maven/"	}	maven { //Maven for HWYLA		name 'Tehnut maven'		url "https://maven.tehnut.info/"	}	maven { //Maven for JEI		name = "Progwml6 maven"		url = "http://dvs1.progwml6.com/files/maven"	}	maven { // TOP		name 'tterrag maven'		url "http://maven.tterrag.com/"	}	maven { // RedstoneFlux		name 'redstoneflux'		url "http://maven.covers1624.net/"	}	maven { // CodeChickenLib		name 'redstoneflux'		url "http://chickenbones.net/maven/"	}	maven {		url "https://modmaven.k-4u.nl/"	}}dependencies {	//compile 'com.leviathanstudio:CraftStudioAPI:1.0.0.93-mc1.12-alpha:dev'	//compile files('libs/CraftStudioAPI-1.0.1.95-mc1.12-alpha.jar')	//deobfCompile 'mcp.mobius.waila:Hwyla:1.8.22-B37_1.12'	deobfCompile 'mezz.jei:jei_1.12.2:4.8.0.119:api'	deobfCompile 'cofh:RedstoneFlux:1.12-2.1.0.6:deobf'	//deobfCompile 'cofh:ThermalExpansion:1.12.2-5.5.2.39:deobf'	//deobfCompile 'cofh:CoFHCore:1.12.2-4.6.1.22:deobf'	//deobfCompile 'cofh:ThermalFoundation:1.12.2-2.6.3.27:deobf'	//deobfCompile 'cofh:CoFHWorld:1.12.2-1.3.1.7:deobf'	//deobfCompile 'codechicken:CodeChickenLib:1.12.2-3.2.3.357:deobf'	deobfCompile 'mcjty.theoneprobe:TheOneProbe-1.12:1.12-1.4.18-10'	//runtime 'mezz.jei:jei_1.12.2:4.8.0.119'	deobfCompile "curse.maven:hwyla:2568751"	compile fileTree(dir: 'libs', include: ['*.jar'])}tasks.build.dependsOn("animaniaBuild")tasks.build.dependsOn("addonBuild")tasks.build.dependsOn("cleanup")task animaniaBuild(type: Jar, dependsOn: reobfJar) {	appendix = "base"	from(zipTree(jar.archivePath).matching {		include "**/"		addons.each {			exclude "**/${it}/**" //Excluding addons		}		exclude "**/cofh/**"	})}task cleanup(type: Delete) {	delete jar.archivePath}task addonBuild(dependsOn: animaniaBuild) {	addons.eachWithIndex { element, i ->		def currentAddon = createAddon("${element}", buildname, i)		def currentAddonSrc = createAddonSource("${element}", buildname, i)		def currentAddonDeobf = createAddonDeobf("${element}", buildname, i)		tasks.build.dependsOn(currentAddon)		tasks.cleanup.dependsOn(currentAddon)		tasks.build.dependsOn(currentAddonSrc)		tasks.cleanup.dependsOn(currentAddonSrc)		tasks.build.dependsOn(currentAddonDeobf)		tasks.cleanup.dependsOn(currentAddonDeobf)	}}def createAddon(name, buildname, index) {	return tasks.create("${name}Jar", Jar) {		archiveName = "${archivesBaseName}-${name}-${addonversions[index]}.jar"		includeEmptyDirs = false		from(zipTree(jar.archivePath).matching {			include "**/${name}/**"			include "com/animania/api/**"			exclude "**/cofh/**"		})	}}def createAddonSource(name, buildname, index) {	return tasks.create("${name}Source", Jar) {		archiveName = "${archivesBaseName}-${name}-${addonversions[index]}-sources.jar"		includeEmptyDirs = false		classifier = 'sources'		from(sourceSets.main.allSource) {			include "**/${name}/**"			include "com/animania/api/**"			exclude "**/cofh/**"		}	}}def createAddonDeobf(name, buildname, index) {	return tasks.create("${name}Deobf", Jar) {		archiveName = "${archivesBaseName}-${name}-${addonversions[index]}-deobf.jar"		includeEmptyDirs = false		classifier = 'deobf'		from(sourceSets.main.output) {			include "**/${name}/**"			include "com/animania/api/**"			exclude "**/cofh/**"		}	}}processResources {	inputs.property "version", animaniaversion	inputs.property "mcversion", mcversion	from(sourceSets.main.resources.srcDirs) {		include 'mcmod.info'		expand 'version':animaniaversion, 'mcversion':mcversion	}	from(sourceSets.main.resources.srcDirs) {		exclude 'mcmod.info'	}}task sourcesJar(type: Jar, dependsOn: classes) {	description = 'Creates a JAR containing the source code.'	classifier = 'sources'	appendix = "base"	from(sourceSets.main.allSource) {		include "**/"		addons.each {			exclude "**/${it}/**" //Excluding addons		}		exclude "**/cofh/**"	}}task deobfJar(type: Jar) {	description = 'Creates a JAR containing the non-obfuscated compiled code.'	classifier = "deobf"	appendix = "base"	from(sourceSets.main.output) {		include "**/"		addons.each {			exclude "**/${it}/**" //Excluding addons		}		exclude "**/cofh/**"	}}artifacts {	archives sourcesJar	archives deobfJar}publishing {	publications {		mavenJava(MavenPublication) {			groupId project.group			artifactId "${project.archivesBaseName}-base"			version project.version			artifact animaniaBuild.archivePath			// Allows the maven pom file to be modified.			pom.withXml {				// Go through all the dependencies.				asNode().dependencies.dependency.each { dep ->					println 'Surpressing artifact ' + dep.artifactId.last().value().last() + ' from maven dependencies.'					assert dep.parent().remove(dep)				}			}			artifact sourcesJar {				classifier 'sources'			}			artifact deobfJar {				classifier 'deobf'			}		}		addons.eachWithIndex { element, i ->			publishing.publications.create("${element}-publication", MavenPublication) {				groupId project.group				artifactId "${project.archivesBaseName}-${element}"				version "${addonversions[i]}${buildversion}"				pom.withXml {					// Go through all the dependencies.					asNode().dependencies.dependency.each { dep ->						println 'Surpressing artifact ' + dep.artifactId.last().value().last() + ' from maven dependencies.'						assert dep.parent().remove(dep)					}				}				artifact tasks.getByName("${element}Deobf") {					classifier 'deobf'				}				artifact tasks.getByName("${element}Source") {					classifier 'sources'				}				artifact tasks.getByName("${element}Jar").archivePath			}		}	}	repositories {		maven {			url "file://" + System.getenv("local_maven")		}	}}